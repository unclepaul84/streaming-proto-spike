/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example;

import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.util.JsonFormat;
import com.google.protobuf.DynamicMessage;
import proto.*;
import com.google.protobuf.Descriptors;

import java.io.FileDescriptor;
import java.io.IOException;
import java.util.*;
import java.io.File;

public class App {

        public static void main(String[] args) throws Exception {
        
                try ( OnDiskBPlusTree tree = new OnDiskBPlusTree("btree.data"))
                {

  
                  for (int i = 0; i < 5000 ; i++) {
                        byte[] key = ("AAPL" + i).getBytes("UTF-8");
                       
                        for (int j = 0; j < 5000; j++) {
                            try {
                                byte[] value = intToByteArray(j);
                                tree.insert(key, value); 
                        }catch (IOException e) {
                                System.out.println("Error inserting key: " + new String(key) + " - " + e.getMessage() +  " key count " + (i*j));
                            }  
                        }
              
                } 
            

                //OnDiskBPlusTree tree_read = new OnDiskBPlusTree("btree.data");
              
                  for (int i = 0; i < 5000 ; i++) {
                        
                        byte[] key = ("AAPL" + i).getBytes("UTF-8");
                       
                      
                           //long startTime = System.nanoTime();
                           Iterable<byte[]> res =  tree.search(key);
                        //   long endTime = System.nanoTime();
                           //System.out.println("Search took " + (endTime - startTime) / 1_000_000.0 + " ms");
                              java.util.concurrent.atomic.AtomicLong sum = new java.util.concurrent.atomic.AtomicLong(0);

                               res.forEach( value -> {
                                   int result = fromByteArray(value);
                                   sum.incrementAndGet();
                                   
                               });

                               if(sum.get() != 5000) {
                                   System.out.println("Incorrect values found for key: " + new String(key) + " - Expected 1000, found " + sum.get());
                               }
                               
                       
                } 
                }

               // System.out.println("Sum of all values: " + sum.get());

        //byte[] key = "AAPL".getBytes("UTF-8");
       
       // byte[] bytes = intToByteArray(123456789);
        //tree.insert(key, bytes);
         
         //int result =  fromByteArray( tree.search(key).get(0));
         //System.out.println("Inserting key: " + result);
        }

public static final byte[] intToByteArray(int value) {
    return new byte[] {
            (byte)(value >>> 24),
            (byte)(value >>> 16),
            (byte)(value >>> 8),
            (byte)value};
}
   public static final int fromByteArray(byte[] bytes) {
     return ((bytes[0] & 0xFF) << 24) | 
            ((bytes[1] & 0xFF) << 16) | 
            ((bytes[2] & 0xFF) << 8 ) | 
            ((bytes[3] & 0xFF) << 0 );
}


}

